if(require(readxl), install.packages("readxl"))
if(!require(readxl)) install.packages("readxl")
library(readxl)
data_cub <- read_xlsx("SítioPrognoseRegulaçãoNatalia.xlsx", sheet = "Cubagem")
View(data_cub)
data_cub <- subset(data_cub,select = c(avr,hi,di,DAP,HT))
data_cub <- subset(data_cub,select = c(arv,hi,di,DAP,HT))
write.csv2(data_cub, file = "arvores_cubadas", sep = ",", col.names = TRUE, row.names = FALSE)
write.csv2(data_cub, file = "arvores_cubadas", sep = ",", row.names = FALSE)
write.csv(data_cub, file = "arvores_cubadas", sep = ",", row.names = FALSE)
write.csv(data_cub, file = "arvores_cubadas", row.names = FALSE, sep = ',')
write.csv(data_cub, file = "arvores_cubadas.csv", row.names = FALSE, sep = ',')
write.csv(data_cub, file = "arvores_cubadas.csv", row.names = FALSE)
dados_cubagem <- read.csv2("arvors_cubadas.csv", header = TRUE)
dados_cubagem <- read.csv2("arvores_cubadas.csv", header = TRUE)
View(dados_cubagem)
dados_cubagem <- read.csv2("arvores_cubadas.csv", header = TRUE, sep = ",")
dados_cubagem < as.numeric(dados_cubagem$arv:dados_cubagem$HT)
View(dados_cubagem)
dados_cubagem$hi < as.numeric(dados_cubagem$hi)
dados_cubagem$hi <- as.numeric(dados_cubagem$hi)
colunas_para_converter <- c("arv", "hi", "di", "DAP", "HT")
# Usar lapply para converter as colunas para valores numéricos
dados_cubagem[colunas_para_converter] <- lapply(dados_cubagem[colunas_para_converter], as.numeric)
rm(colunas_para_converter)
dados_cubagem["gi"] <- (pi*(dados_cubagem["DAP"])^2/40000)
dados_cubagem["gi"] <- (pi*(dados_cubagem["di"])^2/40000)
i <- 2
dados_cubagem[[i,"volume_seccional"]] <- dados_cubagem[[i,"gi"]] - dados_cubagem[[i-1,"gi"]]
dados_cubagem[[,"volume_seccional"]] <- dados_cubagem[[i,"gi"]] - dados_cubagem[[i-1,"gi"]]
dados_cubagem[["volume_seccional"]] <- dados_cubagem[[i,"gi"]] - dados_cubagem[[i-1,"gi"]]
dados_cubagem$volume_seccional <- dados_cubagem[[i,"gi"]] - dados_cubagem[[i-1,"gi"]]
for (i in length(dados_cubagem$gi)) {
dados_cubagem$volume_seccional <- dados_cubagem[[i,"gi"]] - dados_cubagem[[i-1,"gi"]]
}
for (i in length(dados_cubagem$gi)) {
dados_cubagem$volume_seccional[i] <- dados_cubagem$gi[i] - dados_cubagem$gi[i-1]
}
dados_cubagem <- read.csv2("arvores_cubadas.csv", header = TRUE, sep = ",")
colunas_para_converter <- c("arv", "hi", "di", "DAP", "HT")
# Usar lapply para converter as colunas para valores numéricos
dados_cubagem[colunas_para_converter] <- lapply(dados_cubagem[colunas_para_converter], as.numeric)
rm(colunas_para_converter)
dados_cubagem["gi"] <- (pi*(dados_cubagem["di"])^2/40000)
for (i in length(dados_cubagem$gi)) {
dados_cubagem$volume_seccional[i] <- dados_cubagem$gi[i] - dados_cubagem$gi[i-1]
}
for (i in length(dados_cubagem$gi)) {
dados_cubagem$volume_seccional[i] <- dados_cubagem$gi[i+1] - dados_cubagem$gi[i]
}
for (i in 2:length(dados_cubagem$gi)) {
dados_cubagem$volume_seccional[i] <- dados_cubagem$gi[i+1] - dados_cubagem$gi[i]
}
for (i in 1:length(dados_cubagem$gi)) {
dados_cubagem$volume_seccional[i] <- (dados_cubagem$gi[i] + dados_cubagem$gi[i+1])*dados_cubagem$hi/2
}
for (i in 1:length(dados_cubagem$gi)) {
dados_cubagem$volume_seccional[i] <- (dados_cubagem$gi[i] + dados_cubagem$gi[i+1])*(dados_cubagem$hi[i+1]-dados_cubagem$hi[i])/2
}
for (i in 1:length(dados_cubagem$gi)) {
if (dados_cubagem$arv[i] == dados_vubagem$arv[i+1]) {
dados_cubagem$volume_seccional[i] <- (dados_cubagem$gi[i] + dados_cubagem$gi[i+1])*(dados_cubagem$hi[i+1]-dados_cubagem$hi[i])/2
}else{
dados_cubagem$volume_seccional[i] <- 0
}
}
for (i in 1:length(dados_cubagem$gi)) {
if (dados_cubagem$arv[i] == dados_cubagem$arv[i+1]) {
dados_cubagem$volume_seccional[i] <- (dados_cubagem$gi[i] + dados_cubagem$gi[i+1])*(dados_cubagem$hi[i+1]-dados_cubagem$hi[i])/2
}else{
dados_cubagem$volume_seccional[i] <- 0
}
}
for (i in 1:length(dados_cubagem$gi)) {
if (dados_cubagem$arv[i] = dados_cubagem$arv[i+1]) {
for (i in 1:length(dados_cubagem$gi)) {
if (dados_cubagem$arv[i] == dados_cubagem$arv[i+1]) {
dados_cubagem$volume_seccional[i] <- (dados_cubagem$gi[i] + dados_cubagem$gi[i+1])*(dados_cubagem$hi[i+1]-dados_cubagem$hi[i])/2
}else{
dados_cubagem$volume_seccional[i] <- 0
}
}
dados_cubagem$volume_seccional <- 0
for (i in 1:(length(dados_cubagem$gi)-1)) {
if (dados_cubagem$arv[i] == dados_cubagem$arv[i+1]) {
dados_cubagem$volume_seccional[i] <- (dados_cubagem$gi[i] + dados_cubagem$gi[i+1])*(dados_cubagem$hi[i+1]-dados_cubagem$hi[i])/2
}else{
dados_cubagem$volume_seccional[i] <- 0
}
}
dados_cubagem$volume_seccional <- 0
for (i in 1:(length(dados_cubagem$gi)-1)) {
if (dados_cubagem$arv[i] == dados_cubagem$arv[i-1]) {
dados_cubagem$volume_seccional[i] <- (dados_cubagem$gi[i] + dados_cubagem$gi[i-1])*(dados_cubagem$hi[i]-dados_cubagem$hi[i-1])/2
}else{
dados_cubagem$volume_seccional[i] <- 0
}
}
for (i in 2:(length(dados_cubagem$gi)-1)) {
if (dados_cubagem$arv[i] == dados_cubagem$arv[i-1]) {
dados_cubagem$volume_seccional[i] <- (dados_cubagem$gi[i] + dados_cubagem$gi[i-1])*(dados_cubagem$hi[i]-dados_cubagem$hi[i-1])/2
}else{
dados_cubagem$volume_seccional[i] <- 0
}
}
dados_cubagem$volume_seccional <- 0
for (i in 2:(length(dados_cubagem$gi)-1)) {
if (dados_cubagem$arv[i] == dados_cubagem$arv[i-1]) {
if(dados_cubagem$hi[i] == dados_cubagem$HT[i]) {
dados_cubagem$volume_seccional[i] <- (dados_cubagem$gi[i]/3)*(dados_cubagem$hi[i]-dados_cubagem$hi[i-1])
}else{
dados_cubagem$volume_seccional[i] <- (dados_cubagem$gi[i] + dados_cubagem$gi[i-1])*(dados_cubagem$hi[i]-dados_cubagem$hi[i-1])/2
}
}else{
dados_cubagem$volume_seccional[i] <- 0
}
}
dados_cubagem$volume_seccional <- 0
for (i in 2:(length(dados_cubagem$gi))) {
if (dados_cubagem$arv[i] == dados_cubagem$arv[i-1]) {
if(dados_cubagem$hi[i] == dados_cubagem$HT[i]) {
dados_cubagem$volume_seccional[i] <- (dados_cubagem$gi[i]/3)*(dados_cubagem$hi[i]-dados_cubagem$hi[i-1])
}else{
dados_cubagem$volume_seccional[i] <- (dados_cubagem$gi[i] + dados_cubagem$gi[i-1])*(dados_cubagem$hi[i]-dados_cubagem$hi[i-1])/2
}
}else{
dados_cubagem$volume_seccional[i] <- 0
}
}
dados_cubagem$volume_seccional <- 0
for (i in 2:(length(dados_cubagem$gi))) {
if (dados_cubagem$arv[i] == dados_cubagem$arv[i-1]) {
if(dados_cubagem$hi[i] == dados_cubagem$HT[i]) {
dados_cubagem$volume_seccional[i] <- (dados_cubagem$gi[i-1]/3)*(dados_cubagem$hi[i]-dados_cubagem$hi[i-1])
}else{
dados_cubagem$volume_seccional[i] <- (dados_cubagem$gi[i] + dados_cubagem$gi[i-1])*(dados_cubagem$hi[i]-dados_cubagem$hi[i-1])/2
}
}else{
dados_cubagem$volume_seccional[i] <- 0
}
}
if(!require(dplyr)) install.packages("dplyr")
library(dplyr)
dados_cubagem <- dados_cubagem %>%
group_by(dados_cubagem$arv) %>%
summarise(sum(volume_seccional),max(DAP),max(HT))
dados_cubagem <- read.csv2("arvores_cubadas.csv", header = TRUE, sep = ",")
colunas_para_converter <- c("arv", "hi", "di", "DAP", "HT")
# Usar lapply para converter as colunas para valores numéricos
dados_cubagem[colunas_para_converter] <- lapply(dados_cubagem[colunas_para_converter], as.numeric)
rm(colunas_para_converter)
dados_cubagem["gi"] <- (pi*(dados_cubagem["di"])^2/40000)
dados_cubagem$volume_seccional <- 0
for (i in 2:(length(dados_cubagem$gi))) {
if (dados_cubagem$arv[i] == dados_cubagem$arv[i-1]) {
if(dados_cubagem$hi[i] == dados_cubagem$HT[i]) {
dados_cubagem$volume_seccional[i] <- (dados_cubagem$gi[i-1]/3)*(dados_cubagem$hi[i]-dados_cubagem$hi[i-1])
}else{
dados_cubagem$volume_seccional[i] <- (dados_cubagem$gi[i] + dados_cubagem$gi[i-1])*(dados_cubagem$hi[i]-dados_cubagem$hi[i-1])/2
}
}else{
dados_cubagem$volume_seccional[i] <- 0
}
}
dados_cubagem_agrupados <- dados_cubagem %>%
group_by(dados_cubagem$arv) %>%
summarise(volume_arvore = sum(volume_seccional), DAP = max(DAP), altura = max(HT))
View(dados_cubagem_agrupados)
dados_cubagem_agrupados <- dados_cubagem %>%
group_by(dados_cubagem$arv) %>%
summarise(arvore_id, volume_arvore = sum(volume_seccional), DAP = max(DAP), altura = max(HT))
dados_cubagem_agrupados <- dados_cubagem %>%
group_by(dados_cubagem$arv) %>%
summarise(arvore_id = arv, volume_arvore = sum(volume_seccional), DAP = max(DAP), altura = max(HT))
dados_cubagem_agrupados <- dados_cubagem %>%
group_by(arvore_id = arv) %>%
summarise(volume_arvore = sum(volume_seccional), DAP = max(DAP), altura = max(HT))
write.csv2(dados_cubagem_agrupados, file = "dados_cubagem_volume.csv", row.names = FALSE, col.names = TRUE)
write.csv(dados_cubagem_agrupados, file = "dados_cubagem_volume.csv", row.names = FALSE, col.names = TRUE)
dados_cubagem <- read.csv2("arvores_cubadas.csv", header = TRUE, sep = ",")
dados_cubagem <- read.csv("arvores_cubadas.csv", header = TRUE, sep = ",")
colunas_para_converter <- c("arv", "hi", "di", "DAP", "HT")
# Usar lapply para converter as colunas para valores numéricos
dados_cubagem[colunas_para_converter] <- lapply(dados_cubagem[colunas_para_converter], as.numeric)
rm(colunas_para_converter)
# Codigo para receber dados de árvores cubados e calcular o volume de cada
# seguindo a fórmula de Smalian.
# O arquivo de entrada de ser .csv e possuir as colunas "arv", "hi", "di", "DAP", "HT".
if(!require(readxl)) install.packages("readxl")
library(readxl)
if(!require(dplyr)) install.packages("dplyr")
library(dplyr)
if (!file.exists("arvores_cubadas.csv")) {
stop("O arquivo 'arvores_cubadas.csv' não foi encontrado no diretório atual.")
}
# Verificar se o arquivo possui as colunas necessárias
required_columns <- c("arv", "hi", "di", "DAP", "HT")
if (!all(required_columns %in% colnames(dados_cubagem))) {
stop("O arquivo não possui todas as colunas necessárias: 'arv', 'hi', 'di', 'DAP', 'HT'")
}
if (!file.exists("arvores_cubadas.csv")) {
stop("O arquivo 'arvores_cubadas.csv' não foi encontrado no diretório atual.")
}
dados_cubagem <- read.csv("arvores_cubadas.csv", header = TRUE, sep = ",")
# Verificar se o arquivo possui as colunas necessárias
required_columns <- c("arv", "hi", "di", "DAP", "HT")
if (!all(required_columns %in% colnames(dados_cubagem))) {
stop("O arquivo não possui todas as colunas necessárias: 'arv', 'hi', 'di', 'DAP', 'HT'")
}
# Converter colunas para numeric
dados_cubagem[required_columns] <- lapply(dados_cubagem[required_columns], as.numeric)
rm(required_columns)
dados_cubagem["gi"] <- (pi*(dados_cubagem["di"])^2/40000)
dados_cubagem$volume_seccional <- 0
for (i in 2:(length(dados_cubagem$gi))) {
if (dados_cubagem$arv[i] == dados_cubagem$arv[i-1]) {
if(dados_cubagem$hi[i] == dados_cubagem$HT[i]) {
dados_cubagem$volume_seccional[i] <- (dados_cubagem$gi[i-1]/3)*(dados_cubagem$hi[i]-dados_cubagem$hi[i-1])
}else{
dados_cubagem$volume_seccional[i] <- (dados_cubagem$gi[i] + dados_cubagem$gi[i-1])*(dados_cubagem$hi[i]-dados_cubagem$hi[i-1])/2
}
}else{
dados_cubagem$volume_seccional[i] <- 0
}
}
dados_cubagem_agrupados <- dados_cubagem %>%
group_by(arvore_id = arv) %>%
summarise(volume_arvore = sum(volume_seccional), DAP = max(DAP), altura = max(HT))
write.csv(dados_cubagem_agrupados, file = "dados_cubagem_volume.csv", row.names = FALSE)
if (file.exists("dados_cubagem_volume.csv")) {
stop("O arquivo 'dados_cubagem_volume.csv' foi criado no diretório atual.")
}
if (file.exists("dados_cubagem_volume.csv")) {
print("O arquivo 'dados_cubagem_volume.csv' foi criado no diretório atual.")
}
if(!require(ggplot2)) install.packages("ggplot2")
library(ggplot2)
grafico <- ggplot(dados_cubagem_agrupados, aes(x = DAP, y = volume_arvore)) +
geom_point() +
labs( x = "DAP (cm)", y = "Volume da árvore") +
ggtitle("Gráfico de disperssão da relação entre DAP e volume")
plot(grafico)
grafico <- ggplot(dados_cubagem_agrupados, aes(x = DAP, y = volume_arvore)) +
geom_point() +
labs( x = "DAP (cm)", y = "Volume da árvore (m³)") +
ggtitle("Gráfico de disperssão da relação entre DAP e volume") +
theme_minimal()
plot(grafico)
grafico <- ggplot(dados_cubagem_agrupados, aes(x = DAP, y = volume_arvore)) +
geom_point() +
labs( x = "DAP (cm)", y = "Volume da árvore (m³)") +
ggtitle("Gráfico de dispersão da relação entre DAP e volume") +
theme_minimal()
plot(grafico)
ggsave("grafico_DAP_volume", plot = grafico)
ggsave("grafico_DAP_volume.png", plot = grafico)
plot(grafico)
ggsave("grafico_DAP_volume.png", plot = grafico)
ggsave("grafico_DAP_volume.png", plot = grafico, width = 8, height = 6, bg = "white")
